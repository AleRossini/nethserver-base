#!/usr/bin/perl -w

#----------------------------------------------------------------------
# copyright (C) 2002 Mitel Networks Corporation
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 		
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 		
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
# 
# Technical support for this program is available from Mitel Networks 
# Please visit our web site www.mitel.com/sme/ for details.
#----------------------------------------------------------------------
package esmith;

use strict;
use Errno;
use esmith::templates;
use esmith::NetworksDB;

my $event = $ARGV [0] || "undefined";

if ($event =~ /network-(create|delete)/ )
{
    my %op = (
	    'network-create' => "add",
	    'network-delete' => "delete"
	);
    my %type = (
	    'network-create' => "network",
	    'network-delete' => 'network-deleted'
	);

    my $network = $ARGV[1]
	or die "Must provide network key\n";
    my $networks = esmith::NetworksDB->open_ro
	or die "Could not open networks DB\n";
    my $rec = $networks->get($network)
	or die "Could not find network record for $network\n";

    my $expected_type = $type{$event};
    my $type = $rec->prop('type') || "undefined";
    die "Record type is $type and should be $expected_type\n" unless
	($type eq $expected_type);

    if (my $networkRouter = $rec->prop('Router'))
    {
	my $networkMask   = $rec->prop('Mask');
	system("/sbin/route", $op{$event}, 
	    "-net", $network, "netmask", "$networkMask", 
	    "gateway", "$networkRouter")
		and warn "Non-zero response from route command\n";
    }
    else
    {
	warn "Network entry $network deprecated - it uses default route.\n";
    }
}

exit (0);
