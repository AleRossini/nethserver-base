#!/usr/bin/perl

#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::ConfigDB;
use esmith::event;
use Date::Parse;

my $confDb = esmith::ConfigDB->open_ro();

# Pass 'checkgen' argument when invoking from cronjob and check the
# exit code:  0 = certificate unchanged, 6 = certificate CHANGED.
my $event = shift;

# Prevent date localization problems:
$ENV{LANG} = 'C';

my $CrtType = "default";
my $CrtFile = $confDb->get_prop('pki', 'CrtFile') || '';
my $KeyFile = $confDb->get_prop('pki', 'KeyFile') || '';
my $CrtFile_default = '/etc/pki/tls/certs/NSRV.crt';
my $KeyFile_default = '/etc/pki/tls/private/NSRV.key';

#
# 1. If a custom certificate has been configured, check for files
# existence.
#

if($CrtFile || $KeyFile) {
    if(-f $CrtFile && -f $KeyFile) {
	$CrtType="custom";
    } else {
	warn "WARNING $CrtFile: custom certificate not found!\n" 
	    if( ! -f $CrtFile);
	warn "WARNING $KeyFile: custom private key not found!\n"
	    if( ! -f $KeyFile);
	warn "WARNING: falling back to default certificate.\n";
    }
}

#
# 2. Set default values, if custom cert is not set at this point
#


#
# 2.1 Generate key and certificate, if missing
#

if( ! -f $KeyFile_default ) {
	system('/usr/libexec/nethserver/pki-genkey');
	if ( $? != 0 ) {
	    exit 3;
	}
}

if( ! -f $CrtFile_default ) {
	system('/usr/libexec/nethserver/pki-gencrt');
	if ( $? != 0 ) {
	    exit 4;
	}
}

if($CrtType eq 'custom') {
    #
    # 3. Check certificate expiration date
    #

    my $x509 = "/usr/bin/openssl x509 -in \"$CrtFile\" -noout";
    my $notAfter = `$x509 -enddate`;

    chomp($notAfter);

    $notAfter =~ s/^notAfter=//;

    # Dates expressed as day units:
    my $now = int (time() / 86400);
    my $expire = int (str2time($notAfter) / 86400);
    my $warningTs = $expire - 7;
    my $renewTs = $expire - 2;

    #
    # 3.1 TODO: send certificate expiration warning
    #
    if ( $now > $expire ) {
	warn "WARNING $CrtFile: certificate EXPIRED on $notAfter\n";
    } elsif ( $now > $warningTs ) {
	warn "WARNING $CrtFile: stale certificate is going to expire on $notAfter\n";
    }

} 

#
# Always regenerate default certificates (used by squid)
#
#
# 3. Check certificate expiration date
#

my $x509 = "/usr/bin/openssl x509 -in \"$CrtFile_default\" -noout";
my $notAfter = `$x509 -enddate`;

chomp($notAfter);

$notAfter =~ s/^notAfter=//;

# Dates expressed as day units:
my $now = int (time() / 86400);
my $expire = int (str2time($notAfter) / 86400);
my $warningTs = $expire - 7;
my $renewTs = $expire - 2;

#
# 3.2 Read certificate subject and compare to current DB,
#     to see if it has been changed.
my $certSubject=`${x509} -subject`;

$certSubject =~ s/^subject= *//;

my $dbSubject = `/usr/libexec/nethserver/pki-gencrt -s`;
   
$dbSubject =~ s/^subject= *//;   

my $generate = 0;

if($now > $renewTs) {
	warn "Stale certificate..\n" if ($event ne 'checkgen');
	$generate = 1;
} 

if($certSubject ne $dbSubject) {
	warn "Subject changed..\n" if ($event ne 'checkgen');
	$generate = 1;
}

#
# 3.2.1 Check only if expired or subject changed:
#
if($event eq 'checkgen') {
	# Notify caller that the certificate must be renewed, exiting
	# with non-zero value "6".
	exit ($generate ? 6 : 0);
}

#
# 3.2.2 Generate a new default certificate:
#
if($generate) {
	warn "Generating new default certificate.\n";
	system('/usr/libexec/nethserver/pki-gencrt', '-f', $CrtFile_default);
	if ( $? != 0 ) {
	    exit 7;
	}
	if($event eq 'hostname-modify') {
	    esmith::event::event_signal('certificate-update', 'hostname-modify') 
		|| die("[ERROR] certificate-update event failed.\n");	
	}
}

