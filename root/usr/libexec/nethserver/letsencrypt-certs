#!/usr/bin/perl

use esmith::ConfigDB;
use esmith::HostsDB;
use File::stat;
use esmith::event;
use Getopt::Std;

my $db = esmith::ConfigDB->open_ro('certificates');
my $adb = esmith::ConfigDB->open('accounts');
my $cdb = esmith::ConfigDB->open();
my $ddb = esmith::HostsDB->open_ro();

my $crtdir = "/etc/letsencrypt.sh/certs/";
my $lebin = "/usr/sbin/letsencrypt.sh";
my $config = "/etc/letsencrypt.sh/config.sh";
my $verbose = 0;
my $testing = 0;
my $force = 0;
our $modified = 0;

sub renew {
    my $domain = shift;

    my $opts = "--cron  --config $config ";

    # file paths
    my $crt = $crtdir.$domain."/cert.pem";
    
    # read the date of certificate link before renewal
    my $tmp = stat($crt);
    my $before = defined($tmp) ? $tmp->mtime : 0;
    
    my $cmd = "$lebin $opts -d $domain";

    if ($force) {
        $cmd .= " -x ";
    }

    if (!$verbose) {
        $cmd .= " >/dev/null";
    } else {
        print $cmd."\n";
    }
    system($cmd);

    # read the date of certificate link after renewal
    $tmp = stat($crt);
    my $after = defined($tmp) ? $tmp->mtime : 0;

    if ($before != $after) {
        $modified++;
        return 1;
    }
    return 0;
}

sub ibay_enabled {
    my $domain = shift;
    foreach $ibay ($adb->get_all_by_prop('type' => 'ibay')) {
        my $httpAliasType = $ibay->prop('HttpAliasType') || "";
        my $httpStatus = $ibay->prop('HttpStatus') || "disabled";
        my $httpVirtualHost = $ibay->prop('HttpVirtualHost') || '';
        if ($httpAliasType eq 'root' && $httpStatus eq 'enabled' && $httpVirtualHost eq $domain) {
            return 1;
        }
    }

    return 0;
}

#
# Update SSL properties of the ibay
# associated to the given domain
#
sub update_ibay {
    my $domain = shift;
    foreach $ibay ($adb->get_all_by_prop('type' => 'ibay')) {
        my $httpVirtualHost = $ibay->prop('HttpVirtualHost') || '';
        if ($httpVirtualHost eq $domain) {
            if ($domain eq '__ANY__') { # special case, ibay is root for FQDN
                $domain = $cdb->get_value('SystemName').".".$cdb->get_value('DomainName');
            }
            $adb->set_prop($ibay->key,'HttpChainFile', $crtdir.$domain."/chain.pem");
            $adb->set_prop($ibay->key,'HttpCrtFile', $crtdir.$domain."/cert.pem");
            $adb->set_prop($ibay->key,'HttpKeyFile', $crtdir.$domain."/privkey.pem");
            last;
        }
    }
}

sub help {
    print "Usage: $0 [-h] [-f] [-v] [-t]\n";
    print "\nOptions:\n";
    print "  -h : show this help\n";
    print "  -f : force certificate renew\n";
    print "  -v : verbose\n";
    print "  -t : testing, enable staging CA\n";
}

my %options=();
getopts("hvtf", \%options);

if (defined $options{h}) {
    help();
    exit 0;
}

if (defined $options{v}) {
    $verbose = 1;
}

if (defined $options{f}) {
    $force = 1;
}

if (defined $options{t}) {
    use File::Temp;
    use File::Copy;
    $testing = 1;
    my $tmp = File::Temp->new( UNLINK => 1);
    system("sed 's|^#CA=\".*\"|CA=https://acme-staging.api.letsencrypt.org/directory|' $config > $tmp");
    $config = $tmp;
}



my $lets_status = $cdb->get_prop('pki','LetsEncrypt') || 'disabled';
if ($lets_status ne 'enabled') {
    if ($verbose) {
       print "LetsEncrypt is disabled, exiting.\n";
       print "\nTo enable LetsEncrypt, execute:\n";
       print "  config setprop pki LetsEncrypt enabled\n";
    }
    exit 0;
}

# Certificate for FQDN
my $fqdn = $cdb->get_value('SystemName').".".$cdb->get_value('DomainName');

if (renew($fqdn)) {
    $cdb->set_prop('pki','ChainFile', $crtdir.$fqdn."/chain.pem");
    $cdb->set_prop('pki','CrtFile', $crtdir.$fqdn."/cert.pem");
    $cdb->set_prop('pki','KeyFile', $crtdir.$fqdn."/privkey.pem");
}


# Certificate for shared folder configured as root http folder
foreach my $host ($ddb->get_all_by_prop('type' => 'self')) {
    next if (!ibay_enabled($host->key));

    if (renew($host->key)) {
        update_ibay($host->key);
    }
 
}

# Custom certificates
foreach my $cert ($db->get_all_by_prop('type' => 'certificate')) {
    my $domain = $cert->key;
    my $status = $cert->prop('status') || 'disabled';
    next if ($status eq 'disabled');

    renew($domain);
}


if ($modified > 0) {
   if ($verbose) {
      print "Executing certificate-update event...\n";
   }
   if(esmith::event::event_signal('certificate-update') == 0) {
       exit 1; 
   }
}

exit 0;
